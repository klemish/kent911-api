# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- build
- test
- deploy
- review
- dast
- staging
- canary
- production
- incremental rollout 10%
- incremental rollout 25%
- incremental rollout 50%
- incremental rollout 100%
- performance
- cleanup
sast:
  stage: test

test:
  stage: test
  image: php:8.2
  variables:
    DEBIAN_FRONTEND:
      noninteractive
  script:
    # Update packages
    - apt update -yqq
    # Prep for Node
    - apt install gnupg -yqq
    # Upgrade to Node 8
    - curl -sL https://deb.nodesource.com/setup_19.x | bash -
    # Install dependencies
    - apt install git nodejs zip unzip libcurl4-gnutls-dev libicu-dev libmcrypt-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev libldap2-dev unixodbc-dev libpq-dev libsqlite3-dev libaspell-dev libsnmp-dev libpcre3-dev libtidy-dev libonig-dev libzip-dev -yqq
    # Install php extensions
    - docker-php-ext-install pdo_pgsql intl gd xml bz2 opcache zip
    # Install & enable Xdebug for code coverage reports
    - pecl install xdebug
    - docker-php-ext-enable xdebug
    # Install Redis
    - pecl install -o -f redis
    - rm -rf /tmp/pear \
    - docker-php-ext-enable redis
    # Install Composer and project dependencies.
    - curl -sS https://getcomposer.org/installer | php
    - php composer.phar install --dev
    # Install Node dependencies.
    - npm install
    # Copy over testing configuration.
    - cp .env.testing .env
    # Run npm build
    - npm run build
    # - npm run dev
    # Generate an application key. Re-cache.
    # - php artisan key:generate
    - php artisan config:cache
    # Run database migrations.
    # - php artisan migrate
    # Run database seed
    # - php artisan db:seed
    # run laravel tests
    - echo xdebug.mode=coverage > /usr/local/etc/php/conf.d/xdebug.ini
    - php ./vendor/phpunit/phpunit/phpunit --do-not-cache-result --log-junit phpunit-report.xml --coverage-cobertura phpunit-coverage.xml --coverage-text
    # run frontend tests
    # - echo "Skip tests"
  artifacts:
    when: always
    reports:
      junit: phpunit-report.xml
      coverage_report:
        coverage_format: cobertura
        path: phpunit-coverage.xml

build:
  stage: build
  image: docker:latest
  variables:
    # Tell docker CLI how to talk to Docker daemon; see
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  services:
    - name: docker:dind
      entrypoint: ["dockerd-entrypoint.sh"]
      command: ["--insecure-registry=registry.specter1591.com:443"]
  before_script:
    - until docker info; do sleep 1; done
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - cp .env.production .env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker context create tls-env
    - docker buildx create --use tls-env --buildkitd-flags '--allow-insecure-entitlement network.host' --driver-opt network=host
    - docker buildx build --provenance=false --push --platform linux/amd64 --network host --output type=image,push=true,compression=zstd,compression-level=22 -t $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG .
    # - docker buildx build --provenance=false --push --platform linux/amd64 --network host -t gitlab-registry.gitlab.svc/specter1591/api:$CI_APPLICATION_TAG .
    # - docker push $CI_REGISTRY_IMAGE --all-tags
  artifacts:
    untracked: true
    reports:
      dotenv: gl-auto-build-variables.env
  rules:
    - if: '$BUILD_DISABLED'
      when: never
    - if: '$AUTO_DEVOPS_PLATFORM_TARGET == "EC2"'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

build_latest:
  stage: production
  image: docker:latest
  variables:
    # Tell docker CLI how to talk to Docker daemon; see
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  services:
    - name: docker:dind
      entrypoint: ["dockerd-entrypoint.sh"]
      command: ["--insecure-registry=registry.specter1591.com:443"]
  before_script:
    - until docker info; do sleep 1; done
  script:
    - cp .env.production .env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker context create tls-env
    - docker buildx create --use tls-env --buildkitd-flags '--allow-insecure-entitlement network.host' --driver-opt network=host
    - docker buildx build ---provenance=false --push --platform linux/amd64 --network host --output type=image,push=true,compression=zstd,compression-level=22 -t $CI_REGISTRY_IMAGE:latest .
    # - docker buildx build --provenance=false --push --platform linux/amd64 --network host -t gitlab-registry.gitlab.svc/specter1591/api:latest .
    # - docker push $CI_REGISTRY_IMAGE --all-tags
  only:
    - master
  needs:
    - test

deploy_kustomize:
  stage: production
  image: alpine:latest
  before_script:
    - apk add --no-cache git curl bash
    - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - mv kustomize /usr/local/bin/
    # - git clone -b $CI_COMMIT_BRANCH https://$CI_DEPLOYER_USER:$CI_DEPLOYER_PASSWORD@gitlab.specter1591.com/$CI_PROJECT_PATH
    - git config --global user.email "gitlab@gitlab.com"
    - git config --global user.name "GitLab CI/CD"
    - git config --list
  script:
    - git checkout $CI_COMMIT_BRANCH
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - cd deployment
    - kustomize edit set image $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
    - cat kustomization.yaml
    - git add .
    - git commit -m '[skip ci] Update Kustomize Deployment'
    - git remote set-url origin https://DEPLOYER_USER:$ACCESS_TOKEN@gitlab.specter1591.com/$CI_PROJECT_PATH
    - git push origin $CI_COMMIT_BRANCH
  when: manual


include:
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/Code-Intelligence.gitlab-ci.yml
  - template: Jobs/Deploy.gitlab-ci.yml
  - template: Jobs/Deploy/ECS.gitlab-ci.yml
  - template: Jobs/Deploy/EC2.gitlab-ci.yml
  - template: Jobs/DAST-Default-Branch-Deploy.gitlab-ci.yml
  - template: Jobs/Browser-Performance-Testing.gitlab-ci.yml
  - template: Jobs/Helm-2to3.gitlab-ci.yml
  - template: Security/DAST.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/License-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
